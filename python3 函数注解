def clip(text : str, max_len : 'int > 0' = 80) -> str:
    """在max_len前面或后面的第一个空格处截断文本 
    """
    end = None
    if len(text) > max_len:
        space_before = text.rfind(' ', 0, max_len)
        if space_before >= 0
            end = space_before
        else:
            space_after = text.rfind(' ', max_len)       # 返回字符串最后一次出现的位置，没有则返回-1 
            if space_after >= 0:
                end = space_after
    if end is None:        # 没找到空格
        end = len(text)
    return text[:end].rstrip()        # 删除字符串末尾指定的字符串，默认为空格
    
 Python 对注解所做的唯一的事情是，把它们存储在函数的__annotations__ 属性里。仅此而已，Python 不做检查、不做强制、
不做验证，什么操作都不做。换句话说，注解对 Python 解释器没有任何意义。注解只是元数据，可以供 IDE、框架和装饰器等工具使用。写作
本书时，标准库中还没有什么会用到这些元数据，唯有inspect.signature() 函数知道怎么提取注解
>>> from clip_annot import clip
>>> from inspect import signature
>>> sig = signature(clip)
>>> sig.return_annotation
<class 'str'>
>>> for param in sig.parameters.values():
... note = repr(param.annotation).ljust(13)
... print(note, ':', param.name, '=', param.default)
<class 'str'> : text = <class 'inspect._empty'> 'int > 0' : max_len = 80
